#include <iostream>

using namespace std;

//8016 홀수피라미드
//처음 문제를 풀때 직접 피라미드를 마지막 층까지 쌓아서 첫번째 수와 마지막 수를 출력했다.
//변수는 int -> 오버플러우 + 타임에러.
//오버플러우는 longlong변수로 해결
//타임에러는 접근법을 달리했다.
//각 층은 1 3 5 7 .. 순으로 수열을 이루는데 각 층을 갯수를 식으로 표현하면
//2n-1개이다. 1층부터 n층까지의 갯수는 시그마(2n-1)이므로 n^2 개이다.
//각수는 1 3 5 7순으로 증가하니 4층끝은 4^2=16 이 16을 다시 2n-1에 대입하면 마지막 층의 마지막수가 나온다. 여기서는 31
//첫번째층은 (n-1)^2+1 한수의 2n-1을 구해주면된다.

int main(void) {
	ios::sync_with_stdio(false);
	long long T, x;	//T는 Testcase, X는 몇층인지
	cin >> T;
	for (int i = 0; i < T; i++) {
		cin >> x; 
		long long n, last, start;	
		n = x * x; //시그마 2n-1이 x^2 
		last = 2 * n - 1;	//2n-1
		n = (x - 1)*(x - 1) + 1;	//마지막층의 전층 + 1 이니까 (x-1)^2+1
		start = 2 * n - 1;	//계산한걸 다시 2n-1 
		cout << "#" << i + 1 << " " << start << " " << last << "\n";
	}
	return 0;
}
